# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    class_user_provider: App\Security\UserProvider
    class_user_repository: App\Repository\UserRepository
    class_utils_password_updater: App\Utils\PasswordUpdater
    locale: en
    cache_type: file_system

services:

    # sogedial.oauth.user_provider:
    #     class: '%class_user_provider%'
    #     arguments: ['@sogedial.oauth.repository_user','@sogedial.oauth.utils.password_updater','@doctrine.orm.entity_manager']

    # sogedial.oauth.repository_user:
    #     class: '%class_user_repository%'
    #     factory: ['@doctrine.orm.entity_manager',getRepository]
    #     arguments:
    #         - App\Entity\User

    # sogedial.oauth.utils.password_updater:
    #     class: '%class_utils_password_updater%'
    #     arguments: ["@security.encoder_factory"]

    # fos_oauth_server.controller.token:
    #     class: App\Controller\TokenController
    #     arguments:
    #         - '@fos_oauth_server.server'
    #         - '@doctrine.orm.entity_manager'

    # default configuration for services in *this* file
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    _defaults:
        #autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.
