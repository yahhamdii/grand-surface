<?php

namespace App\Repository;

use App\Entity\User;
use Doctrine\ORM\QueryBuilder;
use App\Entity\UserCommercial;
use App\Entity\UserCustomer;
use App\Entity\UserAdmin;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository {

    protected $alias = 'u';

    public function findBy(array $filter, array $orderBy = null, $limit = null, $offset = null, $type = null) {

        $qb = $this->createFindByQueryBuilder($filter, $orderBy, $limit, $offset);

        $qb = $this->addTypeQueryPart($qb, $type);

        $this->getAcl($qb);

        return $qb->getQuery()->getResult();
    }

    public function getCount(array $filter, $type = null) {

        $qb = $this->createCountQueryBuilder($filter);

        $qb = $this->addTypeQueryPart($qb, $type);

        $this->getAcl($qb);

        return $qb->getQuery()->getOneOrNullResult();
    }

    
    public function getSalesNumbers(array $filter, array $orderBy = null){

        $qb = $this->createFindByQueryBuilder($filter, $orderBy);

        $qb = $this->addTypeQueryPart($qb, 'commercial');

        $this->getAcl($qb);

        $user = $this->tokenStorage->getToken()->getUser();

        if ($user instanceof UserAdmin || $user instanceof UserCommercial) {            
            $date = new \DateTime();
            $qb->leftJoin('client_commercial.customers', 'client_commercial_customers')
            ->leftJoin('client_commercial_customers.orders', 'orders')
            ->andWhere('orders.dateValidate >= :month OR orders IS NULL')   
            ->select('COUNT(client_commercial.id) as count_clients, COUNT(orders.id) as count_orders, SUM(orders.totalPriceVat) as total_orders_vat, commercials.username, commercials.id, commercials.lastname')
            ->groupBy('commercials.id')
            ->setParameter('month', $date->format('Y-m'));

            return $qb->getQuery()->getResult();
        }
       
        return false;
    }

    public function getUserByUsername($username) {

        return $this->createQueryBuilder($this->getAlias())
                        ->where('u.username = :username')
                        ->setParameter('username', $username)
                        ->getQuery()
                        ->getOneOrNullResult();
    }

    public function createUser($passwordUpdater, $username, $email, $plainPassword, $role, $enabled) {
        $em = $this->getEntityManager();

        $user = new User();
        $user->setPlainPassword($plainPassword);
        $user->setUsername($username);
        $user->setEmail($email);
        $user->setEnabled($enabled);
        $user->addRole($role);

        $passwordUpdater->hashPassword($user);

        $em->persist($user);
        $em->flush();

        return $user;
    }

    protected function getAcl(QueryBuilder $qb): void {

        $user = $this->tokenStorage->getToken()->getUser();

        $qb->leftJoin(UserCustomer::class, 'customers', 'WITH', $this->alias . '.id=customers.id')
                ->leftJoin('customers.client', 'client_customers')
                ->leftJoin(UserCommercial::class, 'commercials', 'WITH', $this->alias . '.id=commercials.id')
                ->leftJoin('commercials.clients', 'client_commercial')
                ->leftJoin(UserAdmin::class, 'admins', 'WITH', $this->alias . '.id=admins.id');
                
        if ($user instanceof UserCustomer) {
            $arrayPlatform = [];
            foreach ($user->getClient()->getPlatforms() as $platform) {
                $arrayPlatform[] = $platform->getId();
            }
            $qb->andWhere('client_commercial.id IN (:idsClients) OR admins.platform IN (:platforms) OR customers.client IN (:idsClients)')
                    ->setParameter('idsClients', [$user->getClient()])
                    ->setParameter('platforms', $arrayPlatform);
        } elseif ($user instanceof UserCommercial) {
            $arrayClients = [];
            foreach ($user->getClients() as $client) {
                $arrayClients[] = $client->getId();
            }
            $qb->andWhere('customers.client IN (:idsClients) OR commercials.platform IN (:platforms) OR admins.platform IN (:platforms)')
                    ->setParameter('idsClients', $arrayClients)
                    ->setParameter('platforms', [$user->getPlatform()]);
        } elseif ($user instanceof UserAdmin) {
            $qb->leftJoin('client_customers.platforms', 'platform_client_customers')
                    ->andWhere('platform_client_customers.id = :idPlatform OR admins.platform = :idPlatform OR commercials.platform = :idPlatform')
                    ->setParameter('idPlatform', $user->getPlatform());
        }
    }
}
